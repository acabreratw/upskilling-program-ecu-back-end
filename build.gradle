buildscript {
    ext {
        springBootVersion = '2.3.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "org.owasp.dependencycheck" version "5.2.4"
    id 'jacoco'
}

group = 'com.thoughtworks.lep'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.apache.commons:commons-lang3'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.3.1.RELEASE'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'junit:junit:4.12'

    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'org.assertj:assertj-core:3.16.1'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "com.auth0:java-jwt:3.4.0"
    implementation 'com.auth0:auth0-spring-security-api:1.3.1'
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.security:spring-security-config'

    testCompile 'com.intuit.karate:karate-junit4:0.9.5'
    testCompile 'com.intuit.karate:karate-apache:0.9.5'
}
test {
    // pull cucumber options into the cucumber jvm
    systemProperty "cucumber.options", System.properties.getProperty("cucumber.options")
    // pull karate options into the jvm
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // ensure tests are always run
    outputs.upToDateWhen { false }

    if (System.properties['test.profile'] == 'integration') {
        include '**/**/**/**/**/*integration/*'
    } else if (System.properties['test.profile'] == 'e2e') {
        include '**/**/**/**/**/*e2e/*'
    } else {
        exclude '**/**/**/**/**/*integration/*'
        exclude '**/**/**/**/**/*e2e/*'
    }
}

sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }
}

task runApp(type: Exec) {
    commandLine 'java', '-Xms512m', '-Xmx1024m', '-XX:MaxPermSize=2048m', '-jar', "build/libs/${rootProject.name}-${version}.jar"
}

if(project.hasProperty('strict-security')) {
  check.dependsOn dependencyCheckAnalyze
}
// This number controls how sensible is our checking (number from 0 to 10)
// Now is 1 since we have some vulnerabilities that need to be fixed
dependencyCheck {
    failBuildOnCVSS 10
}
